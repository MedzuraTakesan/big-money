const { browserManager } = require('./browser-manager.js');

class Parser {
    constructor(params) {
        this.domain = params.domain;
        this.cookie = this.parseCookies(params.cookie);
        this.waitUntil = params.waitUntil || 'domcontentloaded';
    }

    parseCookies(cookieStr) {
        if (!cookieStr) {
            return []
        }

        return cookieStr.split(';').map(cookie => {
            const [name, ...rest] = cookie.trim().split('=');
            return {
                name,
                value: rest.join('='),
                domain: this.domain,
                path: '/',
                httpOnly: false,
                secure: true
            };
        });
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø–æ —Å–∫—Ä–æ–ª–ª—É
    async scrollToLoadMore(page, options = {}) {
        const {
            maxScrolls = 2,
            scrollDelay = 300,
            scrollStep = 0.4,
            targetElements = null,
            minElements = 10
        } = options;

        console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–º–∞–∫—Å–∏–º—É–º ${maxScrolls} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫)`);
        
        let scrollCount = 0;
        let previousHeight = 0;
        let elementsCount = 0;

        while (scrollCount < maxScrolls) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const currentHeight = await page.evaluate(() => document.body.scrollHeight);
            
            // –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞
            if (currentHeight === previousHeight && scrollCount > 0) {
                console.log(`üìè –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞`);
                break;
            }

            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.evaluate((step) => {
                window.scrollTo(0, document.body.scrollHeight * step);
            }, scrollStep);

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await this.wait(scrollDelay);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä
            if (targetElements) {
                const newElementsCount = await page.$$eval(targetElements, elements => elements.length);
                console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${newElementsCount}`);
                
                if (newElementsCount >= minElements && newElementsCount === elementsCount && scrollCount > 0) {
                    console.log(`‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (${minElements})`);
                    break;
                }
                elementsCount = newElementsCount;
            }

            previousHeight = currentHeight;
            scrollCount++;
        }

        console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–¥–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (${scrollCount} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫)`);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    async processAllBlocks({ page, block, selectors = {}, links = {}, imgs = {} }) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const blockCount = await page.$$eval(block, blocks => blocks.length);
        console.log(`Found ${blockCount} blocks with selector: ${block}`);
        
        if (blockCount === 0) {
            console.warn(`No blocks found with selector: ${block}`);
            
            return [];
        }
        
        return page.$$eval(
            block,
            (blocks, { selectors, links, imgs}) => {
                return blocks.map((element, index) => {
                    const data = {};
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    for (const [key, selector] of Object.entries(selectors)) {
                        try {
                            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                            const selectorList = selector.split(',').map(s => s.trim());
                            let el = null;
                            
                            for (const sel of selectorList) {
                                el = element.querySelector(sel);
                                if (el) break;
                            }
                            
                            data[key] = el ? el.textContent.trim() : null;
                        } catch (error) {
                            console.error(`Error processing selector ${key}:`, error);
                            data[key] = null;
                        }
                    }

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
                    for (const [key, link] of Object.entries(links)) {
                        try {
                            const selectorList = link.split(',').map(s => s.trim());
                            let el = null;
                            
                            for (const sel of selectorList) {
                                el = element.querySelector(sel);
                                if (el) break;
                            }
                            
                            data[key] = el ? el.href : null;
                        } catch (error) {
                            console.error(`Error processing selector ${key}:`, error);
                            data[key] = null;
                        }
                    }

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    for (const [key, img] of Object.entries(imgs)) {
                        try {
                            const selectorList = img.split(',').map(s => s.trim());
                            let el = null;
                            
                            for (const sel of selectorList) {
                                el = element.querySelector(sel);
                                if (el) break;
                            }
                            
                            data[key] = el ? el.src : null;
                        } catch (error) {
                            console.error(`Error processing selector ${key}:`, error);
                            data[key] = null;
                        }
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (index < 3) {
                        console.log(`Block ${index + 1}:`, {
                            name: data.name ? data.name.substring(0, 50) + '...' : 'No name',
                            price: data.price || 'No price',
                            sale: data.sale || 'No sale',
                            reviews: data.reviews || 'No reviews'
                        });
                    }
                    
                    return data;
                });
            },
            {
                selectors,
                links,
                imgs
            }
        );
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
    async wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async getTextFromSelector({ url, selector, skipScroll = false, timeout = 12000, aggressiveOptimization = false, scrollOptions = {} }) {
        const browser = await browserManager.getBrowser();
        const page = await browser.newPage();
        
        try {
            // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –≤ headless —Ä–µ–∂–∏–º–µ
            await page.setViewport({ width: 1920, height: 1080 });
            await page.setUserAgent(
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            );

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è headless —Ä–µ–∂–∏–º–∞
            await page.evaluateOnNewDocument(() => {
                // –≠–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è headless —Ä–µ–∂–∏–º–∞
                if (!Object.getOwnPropertyDescriptor(navigator, 'webdriver')) {
                    Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
                }
                if (!Object.getOwnPropertyDescriptor(navigator, 'plugins')) {
                    Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });
                }
                if (!Object.getOwnPropertyDescriptor(navigator, 'languages')) {
                    Object.defineProperty(navigator, 'languages', { get: () => ['ru-RU', 'ru', 'en'] });
                }
                
                // –≠–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
                if (!Object.getOwnPropertyDescriptor(screen, 'width')) {
                    Object.defineProperty(screen, 'width', { get: () => 1920 });
                }
                if (!Object.getOwnPropertyDescriptor(screen, 'height')) {
                    Object.defineProperty(screen, 'height', { get: () => 1080 });
                }
                if (!Object.getOwnPropertyDescriptor(screen, 'availWidth')) {
                    Object.defineProperty(screen, 'availWidth', { get: () => 1920 });
                }
                if (!Object.getOwnPropertyDescriptor(screen, 'availHeight')) {
                    Object.defineProperty(screen, 'availHeight', { get: () => 1040 });
                }
                
                // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                window.addEventListener('scroll', () => {
                    // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    const event = new Event('scroll', { bubbles: true });
                    window.dispatchEvent(event);
                });
            });

            // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if (aggressiveOptimization) {
                await page.setRequestInterception(true);
                page.on('request', (req) => {
                    const resourceType = req.resourceType();
                    const url = req.url();
                    
                    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —à—Ä–∏—Ñ—Ç—ã –ø—Ä–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    if (['image', 'font'].includes(resourceType) || 
                        url.includes('analytics') || 
                        url.includes('tracking')) {
                        req.abort();
                    } else {
                        req.continue();
                    }
                });
            }

            if (this.cookie.length) {
                await page.setCookie(...this.cookie);
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
            await page.goto(url, {
                waitUntil: this.waitUntil,
                timeout: timeout
            });

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è Wildberries
            if (url.includes('wildberries.ru')) {         
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const pageTitle = await page.title();
                const currentUrl = page.url();
                console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageTitle}`);
                console.log(`üîó –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω–∏–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await page.evaluate(() => {
                    window.scrollTo(0, document.body.scrollHeight * 0.3);
                });
                await this.wait(1000);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                const bodyText = await page.evaluate(() => document.body.innerText);
                console.log(`üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${bodyText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            }

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Ozon –≤ headless —Ä–µ–∂–∏–º–µ
            if (url.includes('ozon.ru')) {
                console.log('üîÑ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Ozon...');
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Ozon
                await page.evaluate(() => {
                    // –≠–º—É–ª–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const event = new Event('DOMContentLoaded', { bubbles: true });
                    document.dispatchEvent(event);
                    
                    // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
                    const mouseEvent = new MouseEvent('mousemove', {
                        bubbles: true,
                        cancelable: true,
                        clientX: 100,
                        clientY: 100
                    });
                    document.dispatchEvent(mouseEvent);
                    
                    // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –∑–∞–≥—Ä—É–∑–∫—É –ª–µ–Ω–∏–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    setTimeout(() => {
                        window.scrollTo(0, 100);
                        setTimeout(() => {
                            window.scrollTo(0, 0);
                        }, 100);
                    }, 500);
                });
                
                await this.wait(1000);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                await page.mouse.move(100, 100);
                await page.mouse.wheel({ deltaY: 100 });
                await this.wait(500);
            }

            // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            const blockSelectors = selector.block.split(',').map(s => s.trim());
            let selectorFound = false;
            
            console.log(`Trying selectors for ${url}:`, blockSelectors);
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ä–∞–∑—É
            for (const blockSelector of blockSelectors) {
                try {
                    const count = await page.$$eval(blockSelector, elements => elements.length);
                    if (count > 0) {
                        selectorFound = true;
                        console.log(`‚úÖ Found ${count} elements with selector: ${blockSelector}`);
                        break;
                    }
                } catch (error) {
                    console.warn(`‚ùå Selector ${blockSelector} not found, trying next...`);
                }
            }
            
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–∞–∑—É, –∂–¥–µ–º –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
            if (!selectorFound) {
                console.log('‚è≥ Elements not found immediately, waiting for them...');
                for (const blockSelector of blockSelectors) {
                    try {
                        await page.waitForSelector(blockSelector, { timeout: 5000 });
                        const count = await page.$$eval(blockSelector, elements => elements.length);
                        if (count > 0) {
                            selectorFound = true;
                            console.log(`‚úÖ Found ${count} elements with selector: ${blockSelector} after waiting`);
                            break;
                        }
                    } catch (error) {
                        console.warn(`‚ùå Selector ${blockSelector} not found after waiting, trying next...`);
                    }
                }
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø–æ —Å–∫—Ä–æ–ª–ª—É
            if (!skipScroll) {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è Ozon –≤ headless —Ä–µ–∂–∏–º–µ
                let scrollOptionsFinal = scrollOptions;
                if (url.includes('ozon.ru')) {
                    scrollOptionsFinal = {
                        ...scrollOptions,
                        maxScrolls: scrollOptions.maxScrolls || 3, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è Ozon
                        scrollDelay: scrollOptions.scrollDelay || 500, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                        scrollStep: scrollOptions.scrollStep || 0.3, // –£–º–µ–Ω—å—à–∞–µ–º —à–∞–≥
                        minElements: scrollOptions.minElements || 8
                    };
                    console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è Ozon');
                }
                
                await this.scrollToLoadMore(page, {
                    maxScrolls: scrollOptionsFinal.maxScrolls || 2,
                    scrollDelay: scrollOptionsFinal.scrollDelay || 300,
                    scrollStep: scrollOptionsFinal.scrollStep || 0.4,
                    targetElements: selector.block,
                    minElements: scrollOptionsFinal.minElements || 10
                });
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏
            const result = await this.processAllBlocks({
                page,
                ...selector
            });

            return result;
        } finally {
            await page.close();
            browserManager.returnBrowser(browser);
        }
    }

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    static async closeAllBrowsers() {
        await browserManager.closeAllBrowsers();
    }
}

module.exports = {
    Parser
};